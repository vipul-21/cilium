// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: dnsproxy/dnsproxy.proto

package dnsproxy

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DNSPoliciesResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *DNSPoliciesResult) Reset() {
	*x = DNSPoliciesResult{}
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DNSPoliciesResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSPoliciesResult) ProtoMessage() {}

func (x *DNSPoliciesResult) ProtoReflect() protoreflect.Message {
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSPoliciesResult.ProtoReflect.Descriptor instead.
func (*DNSPoliciesResult) Descriptor() ([]byte, []int) {
	return file_dnsproxy_dnsproxy_proto_rawDescGZIP(), []int{0}
}

func (x *DNSPoliciesResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DNSPoliciesResult) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type FQDNMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FQDN           string   `protobuf:"bytes,1,opt,name=FQDN,proto3" json:"FQDN,omitempty"`
	IPS            [][]byte `protobuf:"bytes,2,rep,name=IPS,proto3" json:"IPS,omitempty"`
	TTL            uint32   `protobuf:"varint,3,opt,name=TTL,proto3" json:"TTL,omitempty"`
	SourceIdentity uint32   `protobuf:"varint,4,opt,name=source_identity,json=sourceIdentity,proto3" json:"source_identity,omitempty"` // Identity of the client making the DNS request
	SourceIp       []byte   `protobuf:"bytes,5,opt,name=source_ip,json=sourceIp,proto3" json:"source_ip,omitempty"`                    // IP address of the client making the DNS request
	ResponseCode   uint32   `protobuf:"varint,6,opt,name=response_code,json=responseCode,proto3" json:"response_code,omitempty"`
}

func (x *FQDNMapping) Reset() {
	*x = FQDNMapping{}
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FQDNMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FQDNMapping) ProtoMessage() {}

func (x *FQDNMapping) ProtoReflect() protoreflect.Message {
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FQDNMapping.ProtoReflect.Descriptor instead.
func (*FQDNMapping) Descriptor() ([]byte, []int) {
	return file_dnsproxy_dnsproxy_proto_rawDescGZIP(), []int{1}
}

func (x *FQDNMapping) GetFQDN() string {
	if x != nil {
		return x.FQDN
	}
	return ""
}

func (x *FQDNMapping) GetIPS() [][]byte {
	if x != nil {
		return x.IPS
	}
	return nil
}

func (x *FQDNMapping) GetTTL() uint32 {
	if x != nil {
		return x.TTL
	}
	return 0
}

func (x *FQDNMapping) GetSourceIdentity() uint32 {
	if x != nil {
		return x.SourceIdentity
	}
	return 0
}

func (x *FQDNMapping) GetSourceIp() []byte {
	if x != nil {
		return x.SourceIp
	}
	return nil
}

func (x *FQDNMapping) GetResponseCode() uint32 {
	if x != nil {
		return x.ResponseCode
	}
	return 0
}

type UpdatesMappingsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpdatesMappingsResult) Reset() {
	*x = UpdatesMappingsResult{}
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatesMappingsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatesMappingsResult) ProtoMessage() {}

func (x *UpdatesMappingsResult) ProtoReflect() protoreflect.Message {
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatesMappingsResult.ProtoReflect.Descriptor instead.
func (*UpdatesMappingsResult) Descriptor() ([]byte, []int) {
	return file_dnsproxy_dnsproxy_proto_rawDescGZIP(), []int{2}
}

func (x *UpdatesMappingsResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DNSResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response    bool     `protobuf:"varint,1,opt,name=response,proto3" json:"response,omitempty"`
	Cnames      []string `protobuf:"bytes,2,rep,name=cnames,proto3" json:"cnames,omitempty"`
	Qtypes      []uint32 `protobuf:"varint,3,rep,packed,name=qtypes,proto3" json:"qtypes,omitempty"`
	AnswerTimes []uint32 `protobuf:"varint,4,rep,packed,name=answer_times,json=answerTimes,proto3" json:"answer_times,omitempty"`
}

func (x *DNSResponseData) Reset() {
	*x = DNSResponseData{}
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DNSResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSResponseData) ProtoMessage() {}

func (x *DNSResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSResponseData.ProtoReflect.Descriptor instead.
func (*DNSResponseData) Descriptor() ([]byte, []int) {
	return file_dnsproxy_dnsproxy_proto_rawDescGZIP(), []int{3}
}

func (x *DNSResponseData) GetResponse() bool {
	if x != nil {
		return x.Response
	}
	return false
}

func (x *DNSResponseData) GetCnames() []string {
	if x != nil {
		return x.Cnames
	}
	return nil
}

func (x *DNSResponseData) GetQtypes() []uint32 {
	if x != nil {
		return x.Qtypes
	}
	return nil
}

func (x *DNSResponseData) GetAnswerTimes() []uint32 {
	if x != nil {
		return x.AnswerTimes
	}
	return nil
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	RequestId uint32 `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_dnsproxy_dnsproxy_proto_rawDescGZIP(), []int{4}
}

func (x *Result) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Result) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

type DNSServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsServerIdentity uint32 `protobuf:"varint,1,opt,name=dns_server_identity,json=dnsServerIdentity,proto3" json:"dns_server_identity,omitempty"` // Identity of destination DNS server
	DnsServerPort     uint32 `protobuf:"varint,2,opt,name=dns_server_port,json=dnsServerPort,proto3" json:"dns_server_port,omitempty"`
	DnsServerProto    uint32 `protobuf:"varint,3,opt,name=dns_server_proto,json=dnsServerProto,proto3" json:"dns_server_proto,omitempty"`
}

func (x *DNSServer) Reset() {
	*x = DNSServer{}
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DNSServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSServer) ProtoMessage() {}

func (x *DNSServer) ProtoReflect() protoreflect.Message {
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSServer.ProtoReflect.Descriptor instead.
func (*DNSServer) Descriptor() ([]byte, []int) {
	return file_dnsproxy_dnsproxy_proto_rawDescGZIP(), []int{5}
}

func (x *DNSServer) GetDnsServerIdentity() uint32 {
	if x != nil {
		return x.DnsServerIdentity
	}
	return 0
}

func (x *DNSServer) GetDnsServerPort() uint32 {
	if x != nil {
		return x.DnsServerPort
	}
	return 0
}

func (x *DNSServer) GetDnsServerProto() uint32 {
	if x != nil {
		return x.DnsServerProto
	}
	return 0
}

type DNSPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceIdentity uint32       `protobuf:"varint,1,opt,name=source_identity,json=sourceIdentity,proto3" json:"source_identity,omitempty"` // Identity of the workload this L7 DNS policy should apply to
	DnsPattern     []string     `protobuf:"bytes,2,rep,name=dns_pattern,json=dnsPattern,proto3" json:"dns_pattern,omitempty"`              // Allowed DNS pattern this identity is allowed to resolve.
	DnsServers     []*DNSServer `protobuf:"bytes,3,rep,name=dns_servers,json=dnsServers,proto3" json:"dns_servers,omitempty"`
}

func (x *DNSPolicy) Reset() {
	*x = DNSPolicy{}
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DNSPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSPolicy) ProtoMessage() {}

func (x *DNSPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSPolicy.ProtoReflect.Descriptor instead.
func (*DNSPolicy) Descriptor() ([]byte, []int) {
	return file_dnsproxy_dnsproxy_proto_rawDescGZIP(), []int{6}
}

func (x *DNSPolicy) GetSourceIdentity() uint32 {
	if x != nil {
		return x.SourceIdentity
	}
	return 0
}

func (x *DNSPolicy) GetDnsPattern() []string {
	if x != nil {
		return x.DnsPattern
	}
	return nil
}

func (x *DNSPolicy) GetDnsServers() []*DNSServer {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

type DNSPolicies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EgressL7DnsPolicy []*DNSPolicy `protobuf:"bytes,1,rep,name=egress_l7_dns_policy,json=egressL7DnsPolicy,proto3" json:"egress_l7_dns_policy,omitempty"`
	RequestId         string       `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"` // Random UUID based identifier which will be referenced in ACKs
}

func (x *DNSPolicies) Reset() {
	*x = DNSPolicies{}
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DNSPolicies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSPolicies) ProtoMessage() {}

func (x *DNSPolicies) ProtoReflect() protoreflect.Message {
	mi := &file_dnsproxy_dnsproxy_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSPolicies.ProtoReflect.Descriptor instead.
func (*DNSPolicies) Descriptor() ([]byte, []int) {
	return file_dnsproxy_dnsproxy_proto_rawDescGZIP(), []int{7}
}

func (x *DNSPolicies) GetEgressL7DnsPolicy() []*DNSPolicy {
	if x != nil {
		return x.EgressL7DnsPolicy
	}
	return nil
}

func (x *DNSPolicies) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

var File_dnsproxy_dnsproxy_proto protoreflect.FileDescriptor

var file_dnsproxy_dnsproxy_proto_rawDesc = []byte{
	0x0a, 0x17, 0x64, 0x6e, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x64, 0x6e, 0x73, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x64, 0x6e, 0x73, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x22, 0x4c, 0x0a, 0x11, 0x44, 0x4e, 0x53, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x22, 0xb0, 0x01, 0x0a, 0x0b, 0x46, 0x51, 0x44, 0x4e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x51, 0x44, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x46, 0x51, 0x44, 0x4e, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x50, 0x53, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x03, 0x49, 0x50, 0x53, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x54, 0x4c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x54, 0x54, 0x4c, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x31, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x0f, 0x44, 0x4e, 0x53, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x71, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x06, 0x71, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x41, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x8d, 0x01,
	0x0a, 0x09, 0x44, 0x4e, 0x53, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x64,
	0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x64,
	0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64,
	0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x01,
	0x0a, 0x09, 0x44, 0x4e, 0x53, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x34, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6e, 0x73,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x44, 0x4e, 0x53, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x0a, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x72, 0x0a, 0x0b, 0x44,
	0x4e, 0x53, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x14, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x37, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6e, 0x73, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x44, 0x4e, 0x53, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x11, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x37, 0x44, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x32,
	0xab, 0x01, 0x0a, 0x08, 0x46, 0x51, 0x44, 0x4e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x16,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x44, 0x4e, 0x53, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x64, 0x6e, 0x73, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x44, 0x4e, 0x53, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x1a, 0x15, 0x2e, 0x64, 0x6e, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x44,
	0x4e, 0x53, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01,
	0x12, 0x4b, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x15, 0x2e, 0x64, 0x6e, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x46,
	0x51, 0x44, 0x4e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x1f, 0x2e, 0x64, 0x6e, 0x73,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x42, 0x2a, 0x5a,
	0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x69, 0x6c, 0x69,
	0x75, 0x6d, 0x2f, 0x63, 0x69, 0x6c, 0x69, 0x75, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x6e, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_dnsproxy_dnsproxy_proto_rawDescOnce sync.Once
	file_dnsproxy_dnsproxy_proto_rawDescData = file_dnsproxy_dnsproxy_proto_rawDesc
)

func file_dnsproxy_dnsproxy_proto_rawDescGZIP() []byte {
	file_dnsproxy_dnsproxy_proto_rawDescOnce.Do(func() {
		file_dnsproxy_dnsproxy_proto_rawDescData = protoimpl.X.CompressGZIP(file_dnsproxy_dnsproxy_proto_rawDescData)
	})
	return file_dnsproxy_dnsproxy_proto_rawDescData
}

var file_dnsproxy_dnsproxy_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_dnsproxy_dnsproxy_proto_goTypes = []any{
	(*DNSPoliciesResult)(nil),     // 0: dnsproxy.DNSPoliciesResult
	(*FQDNMapping)(nil),           // 1: dnsproxy.FQDNMapping
	(*UpdatesMappingsResult)(nil), // 2: dnsproxy.UpdatesMappingsResult
	(*DNSResponseData)(nil),       // 3: dnsproxy.DNSResponseData
	(*Result)(nil),                // 4: dnsproxy.Result
	(*DNSServer)(nil),             // 5: dnsproxy.DNSServer
	(*DNSPolicy)(nil),             // 6: dnsproxy.DNSPolicy
	(*DNSPolicies)(nil),           // 7: dnsproxy.DNSPolicies
}
var file_dnsproxy_dnsproxy_proto_depIdxs = []int32{
	5, // 0: dnsproxy.DNSPolicy.dns_servers:type_name -> dnsproxy.DNSServer
	6, // 1: dnsproxy.DNSPolicies.egress_l7_dns_policy:type_name -> dnsproxy.DNSPolicy
	0, // 2: dnsproxy.FQDNData.SubscribeToDNSPolicies:input_type -> dnsproxy.DNSPoliciesResult
	1, // 3: dnsproxy.FQDNData.UpdatesMappings:input_type -> dnsproxy.FQDNMapping
	7, // 4: dnsproxy.FQDNData.SubscribeToDNSPolicies:output_type -> dnsproxy.DNSPolicies
	2, // 5: dnsproxy.FQDNData.UpdatesMappings:output_type -> dnsproxy.UpdatesMappingsResult
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_dnsproxy_dnsproxy_proto_init() }
func file_dnsproxy_dnsproxy_proto_init() {
	if File_dnsproxy_dnsproxy_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dnsproxy_dnsproxy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dnsproxy_dnsproxy_proto_goTypes,
		DependencyIndexes: file_dnsproxy_dnsproxy_proto_depIdxs,
		MessageInfos:      file_dnsproxy_dnsproxy_proto_msgTypes,
	}.Build()
	File_dnsproxy_dnsproxy_proto = out.File
	file_dnsproxy_dnsproxy_proto_rawDesc = nil
	file_dnsproxy_dnsproxy_proto_goTypes = nil
	file_dnsproxy_dnsproxy_proto_depIdxs = nil
}
